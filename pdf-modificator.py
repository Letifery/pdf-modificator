import sys, getopt, os, glob, argparse, reimport PyPDF2parser = argparse.ArgumentParser(description='-----Program for operations on PDF-Files-----')group = parser.add_mutually_exclusive_group()parser.add_argument('-m', help='merge files in directory [DEFAULT: Current]', action='store_true')parser.add_argument('-r', type=int, help='rotate [90,180,270] degrees clockwise', choices=[90,180,270], metavar = 'INT')group.add_argument('-pall', type=str, help='(Must be first parameter) select all .pdf files of specified directory', metavar = 'PATH')group.add_argument('-pvar', type=str, help='(Must be first parameter) select multiple .pdf files (needs absolute paths, seperated by space - Not working with files which are beginning with "-")', nargs ='*', metavar = 'PATH')args = vars(parser.parse_args())if not any(args.values()):    parser.error("No arguments provided.")args = parser.parse_args()savestate = path = glob.glob("/*.pdf")                                              #Default searchpathcounter = 0#   Method to decide which method should be executed, based on given argumentsdef optionSw(arg,x):    switch = {        '-pall': pathingAll,        '-pvar': pathingVar,        '-m': merge,        '-r': rotate    }       f = switch.get(arg, lambda:"Should not happen")    if (arg == '-r'):        f(sys.argv[x+1])    elif (arg == '-pvar' or arg == '-pall'):        f(x+1)    else:        f()    #   Mode to select every .pdf file in given pathdef pathingAll(arg):     global path                                                                     #Overwriting default path(s)    path = glob.glob(glob.escape(sys.argv[arg]) + "/*.pdf")    if(path == []):                                                                 #Checking if .pdf files at given path are existent        raise Exception("No .pdf files found in given directory")        sys.exit(1)      #   Mode to select specific .pdf files with given absolute pathsdef pathingVar(arg):    global path, counter    path = []                                                                       #clearing default path    for x in range(arg, len(sys.argv)):        if (sys.argv[x][0] == "-") :                                                #Checking if end reached (Might overhaul to allow input files to begin with "-")            break;        if re.search(r'.pdf$', sys.argv[x]) is None:                                #regex to check if input ends with .pdf to ckeck if path is valid            raise Exception(sys.argv[x]+" doesn't point at a .pdf adress")            sys.exit(1)        counter += 1                                                                #increase counter to skip iterations for each given input         path += [sys.argv[x]]                                                       #adding .pdf pointers              #  Creates a blank template on the desktop, where every scanned page gets copied intodef merge():                                                    output = PyPDF2.PdfFileWriter()    for x in range(len(path)):            mfo = PyPDF2.PdfFileReader(open(path[x],'rb'))                          #[BUG] fo can't be closed -> would result in empty pages      (should be fixed, in case of crashes)                                          for pn in range(mfo.numPages):                                          #Scans every page from given file and saves it into output                output.addPage(mfo.getPage(pn))     z = c = 0    while(1):        for y in range(len(savestate)):                                             #regex to check if an output file with identical name at given path is already present            if re.search(r'MergedFiles'+str(z)+'.pdf$', savestate[y]) is None:                c += 1        if (c == len(savestate)):                                                   #if no identical file was found, create output and exit merge()            with open('MergedFiles'+str(z)+'.pdf', 'wb') as pdfOut:                output.write(pdfOut)                break        c = 0        z += 1        if (z >10):                                                                 #Will kill merge execution if loop was 10x unsuccessfull            break                                                                   #(Just a safety measure, in case you modify something which would result in a DDoS of your harddrive ;))    #   Rotates given files, as the name already suggestsdef rotate(d):    d = int(d)            for x in range(len(path)):        mfo = PyPDF2.PdfFileReader(open(path[x],'rb'))                                     output = PyPDF2.PdfFileWriter()        for pn in range(mfo.numPages):            output.addPage(mfo.getPage(pn).rotateClockwise(d))        with open("rotated"+str(y)+".pdf", "wb") as pdfOut:            output.write(pdfOut)           #   Main method  for x in range(1,(len(sys.argv))):    if (sys.argv[x-1]=='-r' or sys.argv[x-1]=='-all'):        continue    if (counter != 0):        counter -= 1        continue    optionSw(sys.argv[x],x)